Git is a distibuted repository managment.

Git 3 stages in local before moving to centrol repository (GitHub)
Workspace area : Devloper create new file or modified the file then it will go to workspace
git status
Index (or) staging area : track the information in the logs. track id, author details.
git log
Local repository area : Which files are in local repository those files only we can push it into centrol repository.


Git useful commands:
Basic commands:
===============
git init  -- to initalze git repo
git config --global user,name "Satishc"
git config --global user.email "devops@gmail.com"
git config --list
touch file-name
example touch file.txt
git status : modified or newly created files are in which area. staging or index area.
git add file-name
git add file-name1 file-name2
git add .
git add *
git add -A
git commit -m "code changes added"
git reset head file-name
git rest --soft <Commit_id>    move the files from local areat to index or staging area.
git reset --mixed <Commit_id>  move the files from local area to workspace area.
git commit -m "code changes added" three.txt   modified files can commit directly from workspace to local area.  

git log               Logs will show the commit id,authore and date.
git log --oneline     Logs will display in one line.
git log -n            Logs will display n number of the commit information.
git log --oneline -n  Logs will display the short form(one line) and number of commits.
git log --author=<AUTHOR NAME>  Logs will display based on the author name
git log --since=yyyy-mm-dd      Logs will display since to now
git log --until=yyyy-mm-dd      Logs will display until
git log --since=yyyy-mm-dd --until=yyyy-mm-dd   logs from that from_date to to_date


Central repository commands :
============================
git clone <path of the central repository>  clone the repositry from the centrol to workspace.
git clone https://github.com/satishchjavastream/SQLCommands.git
git pull                      latest modifications pulled from the centrol repository to workspace
git pull origin <branch_name>
git push                      after commit (local repository code changes) pushed to centrol repository              
git push origin <branch-name>

Branch is nothing but a copy of the master repository data.
Branch commands:
================
git branch              Know the branch inforation. and highlate the select branch in green colour
git branch release-1    Creat a new branch
git checkout release-1  move from exist branch to new branch (example: release-1)
git merge release-1     merge the new files or modified files from release branch to master.so goto target branch (master branch) then merge the release-1 branch.
git branch -d release-1 delete the branch
git branch -D release-1 delete the branch forcefully.
git push origin master      push the code to master1 branch (local repository to centrol repository)
git push origin -d master1  delete the branch from centrol repository
rm file-name                delete the file from centrol repository

Merge conflicts resloution
==========================
Skip the merge. one step back
git merge --abort
How to slove the merge conflicts
------------------------------
Same file we modified in two different branchs and planing to merge the branch from one branch to two then we will see the merge conflict
master banch has a file1.txt,  Now modified the data in file1.txt
master1 branch has a file1.txt same way modified the data in file1.txt
Now we are planing to merge the master1 reposiroty to master. then we will observe that there will be a CONFLICT
-----------------------
SB-IN-5MJRPH2+Satish@SB-IN-5MJRPH2 MINGW64 /d/Learning/Git/gitPractice/practicegit (master)
$ git merge master1
Auto-merging file1.txt
CONFLICT (content): Merge conflict in file1.txt
Automatic merge failed; fix conflicts and then commit the result.

SB-IN-5MJRPH2+Satish@SB-IN-5MJRPH2 MINGW64 /d/Learning/Git/gitPractice/practicegit (master|MERGING)
$ vi file1.txt

SB-IN-5MJRPH2+Satish@SB-IN-5MJRPH2 MINGW64 /d/Learning/Git/gitPractice/practicegit (master|MERGING)
$ git status
On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)

You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add <file>..." to mark resolution)

        both modified:   file1.txt

no changes added to commit (use "git add" and/or "git commit -a")

SB-IN-5MJRPH2+Satish@SB-IN-5MJRPH2 MINGW64 /d/Learning/Git/gitPractice/practicegit (master|MERGING)
$ git add .

SB-IN-5MJRPH2+Satish@SB-IN-5MJRPH2 MINGW64 /d/Learning/Git/gitPractice/practicegit (master|MERGING)
$ git commit  -m "conflict file changes"
[master 246d193] conflict file changes

SB-IN-5MJRPH2+Satish@SB-IN-5MJRPH2 MINGW64 /d/Learning/Git/gitPractice/practicegit (master)



---------------

git diff file-Name        Check the modifications with in the same file .
git diff master master1   Check the difference between two branch files.
git cherry-pick 6dc0d20   move the particular file from one branch to another branch then use cherry-pick command

Stash memory
============
temporary storage area. 
Workspace --> Staging or Index Area --> Local area
Workspace --> Staging or Index area --> Local area
                    |                
                Stash area
              
git status
touch f1.txt
touch f2.txt
git add f1.txt

git stash save "stash1"
Saved working directory and index state On master1: stash1

git stash list
stash@{0}: On master1: stash1

git stash show stash@{0}
f1.txt | 0
 1 file changed, 0 insertions(+), 0 deletions(-)
 
 ===
 pop
 apply
 drop
 ========
 
 git stash pop             Move from latest stash memory to staging or index area
 git stash pop stash@{2}   Move that particular stash memory to staging or index area
 
 git stash apply           Copy from latest stash memory to staging or index area
 git stash apply stash@{1} Copy from particulr stash memory to staging or index area
 
 git stash drop             drop the latest stash memory.
 git stash drop stash@{0}   drop the particular stash memory
 
 create alias
 git config --global alias.s "status"
 remove alias
 git config --global --unset alias.s
 
 Tag - to mak the release point
 ====
 Create Tag
 -----------
 git tag <TAG_NAME>             create tag name in our local env
 git tag v.1.1
 
 git tag <TAG_NAME> commit_id   create tag name with that commit id in our local
 git tag v.1.1 3asd1231
 
 Delete Tag
 -----------
 git tag -d <TAG_NAME>   deleted the tag name in our local
 git tag -d v.1.1
 
 git push origin <tag_name>   created the tag name in central repository
 git push origin tag-1.2      
 git push origin --tags                       created the all tag name in centrol repository
 git push origin -d tag-1.2                   deleted the tag name from the centrol repository
 git push origin -d tag-1.2 tag-1.3 tag-1.4   deleted the tag names from the centrol repository
 
 Amend   - amend use to change the latest commit message.
 ======
 git commit --amend -m <COMMIT MESSAGE>
 git commit --amend -m "modify the added commit"   
 
 Ignore  - Ignore the file
 ========
 touch t1
 touch t2
 touch t3
 vi .gitIgnore
 .gitIgonre
 t1
 t2
 t3
 
 git status
 .gitIgnore in red colour
 t1 t2 t3 files moved to .gitInore file.
 
 
 Difference between Merge and re-base ?
 Branch(master) to branch(feture/v.1.1), if we merge the data then one extra commit id will generate and merged the data from branch(master) to branch(feture/v.1.1)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 






























